{
  "graph input": {
    "prefix": "graph",
    "body": [
      "G = [[] for _ in range(N)]",
      "for _ in range(M):",
      "    u, v = map(lambda x: int(x)-1, input().split())",
      "    G[u].append(v)",
      "    G[v].append(u)"
    ],
    "description": "辺から隣接リストを作成"
  },
  "query_process": {
    "prefix": "query",
    "body": [
      "for _ in range(Q):",
      "    query = list(map(int, input().split()))",
      "    if query[0] == 1:",
      "        ${1} = query[1:]",
      "    elif query[0] == 2:",
      "        ${2} = query[1:]",
      "    # elif query[0] == 3:"
    ],
    "description": "クエリ処理のテンプレート"
  },
  "multi_test": {
    "prefix": " multi",
    "body": [
      "def solve():",
      "    ${1}",
      "",
      "for _ in range(int(input())):",
      "    solve()"
    ],
    "description": "マルチテストケースのテンプレート"
  },
  "meguru": {
    "prefix": " meguru",
    "body": [
      "def judge(k):",
      "    ${3}",
      "",
      "ok = ${1}",
      "ng = ${2}",
      "while abs(ok-ng) > 1:",
      "    mid = (ok+ng) // 2",
      "    if judge(mid):",
      "        ok = mid",
      "    else:",
      "        ng = mid"
    ],
    "description": "因幡式二分探索"
  },
  "yesno": {
    "prefix": "yesno",
    "body": ["print('Yes' if ${1} else 'No')"],
    "description": "YesNo出力"
  },
  "encode": {
    "prefix": "encode",
    "body": [
      "enckey = 10**9",
      "encode = lambda x, y: x*enckey + y",
      "decode = lambda e: (e//enckey, e%enckey)"
    ],
    "description": "pair値をエンコード"
  }
}
